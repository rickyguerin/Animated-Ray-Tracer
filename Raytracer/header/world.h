#pragma once
#ifndef WORLD_H
#define WORLD_H

#include <string>
#include <vector>
#include <glm/mat4x4.hpp>
#include <glm/vec3.hpp>

#include "WorldProgram/shapeProgram.h"
#include "WorldProgram/lightProgram.h"
#include "../header/Math/ray.h"

static const int MAX_DEPTH = 2;

class World {
private:
	// All programs in the World
	std::vector<const ShapeProgram*> programs;
	std::vector<LightProgram> lightPrograms;

	// Background color for the World
	glm::vec3 backgroundColor;

	// The Shapes generated by each program at this time
	std::vector<const Shape*> currentShapes;
	std::vector<Light> currentLights;

public:
	// Constructor
	World(const glm::vec3& color);

	// Destructor
	~World();

	// Add a program to the World
	void addProgram(const std::string& filename);

	// Populate currentShapes
	void loadCurrent(const glm::mat4& cameraMatrix, const float time);

	// Clear currentShapes and currentLights
	void deleteCurrent();

	// Fire a ray into the world and get its color
	glm::vec3 trace(const Ray& ray, const float time, const int depth, const bool inside) const;
};

#endif
